@page "/configuration-view"
@rendermode InteractiveServer

@using Demo.DbValuesChangeMonitoring.Data
@using Demo.DbValuesChangeMonitoring.UI.Code
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options

@implements IDisposable

@inject IDbContextFactory<ConfigurationContext> _dbContextFactory
@inject IOptionsMonitor<DisplayOptions> _options


<h3>Configuration</h3>

@if(_data is not null)
{
    <ConfigurationTable Data="_data" />	
}

<br/>

<b>Font size</b>@(_options.CurrentValue.FontSize)

@code {
    private List<ConfigurationValue>? _data = null;
    private IDisposable? _registration;

    protected override void OnInitialized()
    {
        _registration = _options.OnChange(ReloadPage);
        base.OnInitialized();
    }

    private void ReloadPage(DisplayOptions options, string? listener )
    {
        this.InvokeAsync(async ()=>
        {
            await LoadDataAsync();
            StateHasChanged();
        });
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadDataAsync()
    {
            using var context = _dbContextFactory.CreateDbContext();
            _data = await context.ConfigurationValues
                .ToListAsync();
        
    }

    public void Dispose()
    {
        _registration?.Dispose();
    }
}
